plugins {
	id 'org.springframework.boot' version '2.4.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'tourGuide'
version = '1.0.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.0.1'
    implementation group: 'org.zalando', name: 'jackson-datatype-money', version: '1.2.1' // Jackson module to support JSON serialization and deserialization of JavaMoney
    
    compile group: 'org.javamoney', name: 'moneta', version: '1.3'
	compile group: 'com.jsoniter', name: 'jsoniter', version: '0.9.23'
	
    compile(name:'gpsUtil', ext:'jar')
    compile(name:'RewardCentral', ext:'jar')
    compile(name:'TripPricer', ext:'jar')
    
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    
    testCompile("junit:junit")
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.4.0'
}

jacoco {
    toolVersion = "0.8.6"
}


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // End the test task by doing a jacoco report

jacocoTestReport {
	dependsOn test // Tests are required to run before generating the report
	finalizedBy jacocoTestCoverageVerification // End with a jacoco code coverage verification

    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
        html.destination file("build/reports/jacocoHtml")
    }
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it,
                exclude: [ // Exclude the POJO package
                    '/tourguide/user/*.class'
                ] 
            )
        })
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
     exclude '/tourguide/user/*.class' // Exclude the POJO package
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.3
      }
    }
  }
}
}
